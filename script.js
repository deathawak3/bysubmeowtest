document.addEventListener("DOMContentLoaded", () => {
    // --- 1. –õ–û–ì–ò–ö–ê –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø –ö–û–î–ê (CROSSHAIR) ---
    document.addEventListener("click", async (e) => {
        const btn = e.target.closest(".copy-btn");
        if (!btn) return;
        const code = btn.dataset.code || "";
        try {
            await navigator.clipboard.writeText(code);
            btn.classList.add("copied");
            setTimeout(() => btn.classList.remove("copied"), 1200);
        } catch (err) {
            console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥:", err);
        }
    });

    // --- 2. –õ–û–ì–ò–ö–ê –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –¢–ï–ú–´ ---
    const root = document.documentElement;
    const themeBtn = document.getElementById("theme-toggle");
    if (themeBtn) {
        const applyTheme = (t) => {
            root.setAttribute("data-theme", t);
            themeBtn.textContent = t === "dark" ? "‚òÄÔ∏è" : "üåô";
            themeBtn.setAttribute("aria-label", t === "dark" ? "–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞" : "–¢—ë–º–Ω–∞—è —Ç–µ–º–∞");
        };
        const saved = localStorage.getItem("theme");
        const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
        applyTheme(saved ?? (prefersDark ? "dark" : "light"));

        themeBtn.addEventListener("click", () => {
            const next = root.getAttribute("data-theme") === "dark" ? "light" : "dark";
            applyTheme(next);
            localStorage.setItem("theme", next);
        });
    }

    // --- 3. –õ–û–ì–ò–ö–ê LIGHTBOX (–û–¢–ö–†–´–¢–ò–Ø –ö–ê–†–¢–ò–ù–û–ö) ---
    const lb = document.getElementById("lightbox");
    if (lb) {
        const lbImg = lb.querySelector(".lightbox__img");
        const lbClose = lb.querySelector(".lightbox__close");

        const open = (src, alt = "") => {
            lbImg.src = src;
            lbImg.alt = alt;
            lb.classList.add("is-open");
        };
        const close = () => lb.classList.remove("is-open");

        document.addEventListener("click", (e) => {
            const link = e.target.closest(".gallery .ph");
            if (!link) return;
            e.preventDefault();
            const img = link.querySelector("img");
            open(link.href, img.alt);
        });

        lbClose.addEventListener("click", close);
        lb.addEventListener("click", (e) => {
            if (e.target === lb) close();
        });
        document.addEventListener("keyup", (e) => {
            if (e.key === "Escape") close();
        });
    }

    // --- 4. –õ–û–ì–ò–ö–ê –ê–ù–ò–ú–ê–¶–ò–ò MP4 –° –ü–û–î–î–ï–†–ñ–ö–û–ô –¢–ï–ú–´ (–ò–°–ü–†–ê–í–õ–ï–ù–û) ---
    const splashScreen = document.getElementById("splash-screen");
    const splashVideo = document.getElementById("splash-video");

    if (splashScreen && splashVideo) {
        // --- –í—ã–±–æ—Ä –≤–∏–¥–µ–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã ---
        const currentTheme = root.getAttribute("data-theme") || "dark";
        const lightSrc = splashVideo.dataset.lightSrc;

        // –ï—Å–ª–∏ —Ç–µ–º–∞ —Å–≤–µ—Ç–ª–∞—è, –º–µ–Ω—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
        if (currentTheme === "light" && lightSrc) {
            const oldSource = splashVideo.querySelector('source');
            if (oldSource) oldSource.remove();

            const newSource = document.createElement('source');
            newSource.src = lightSrc;
            newSource.type = "video/mp4";
            splashVideo.appendChild(newSource);

            splashVideo.load();
        }
        // ----------------------------------------

        const hideSplashScreen = () => {
            splashScreen.classList.add("is-done");
        };

        let videoAttempted = false;

        const playVideoAndHide = () => {
            if (videoAttempted) return;
            videoAttempted = true;

            const playPromise = splashVideo.play();

            if (playPromise !== undefined) {
                playPromise.then(() => {
                    // –£–°–ü–ï–•: –í–∏–¥–µ–æ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å. –°–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è.
                    splashVideo.addEventListener("ended", hideSplashScreen);
                }).catch(e => {
                    // –ù–ï–£–î–ê–ß–ê: –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º.
                    console.error("Autoplay failed:", e);
                    hideSplashScreen();
                });
            }
        }

        // 1. –ó–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        splashVideo.onloadeddata = playVideoAndHide;
        splashVideo.addEventListener("loadedmetadata", playVideoAndHide);

        // 2. –°—Ç—Ä–∞—Ö–æ–≤–∫–∞: –ï—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (!splashScreen.classList.contains("is-done")) {
                hideSplashScreen();
            }
        }, 5000);

        // 3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ä–∞–∑—É
        setTimeout(playVideoAndHide, 100);
    }
});